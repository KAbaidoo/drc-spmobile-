package io.bewsys.spmobile.ui.households.forms.developmentalform

import android.os.Bundle
import android.view.*
import androidx.core.os.bundleOf

import androidx.core.widget.addTextChangedListener
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import io.bewsys.spmobile.R
import io.bewsys.spmobile.databinding.FragmentVulnerabilityIBinding
import kotlinx.coroutines.flow.collectLatest
import org.koin.androidx.navigation.koinNavGraphViewModel

class SectionIVulnerabilityFragment : Fragment(R.layout.fragment_vulnerability_i) {


    private val viewModel: SharedDevelopmentalFormViewModel by koinNavGraphViewModel(R.id.form_navigation)

    private var _binding: FragmentVulnerabilityIBinding? = null
    private val binding get() = _binding!!


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        _binding = FragmentVulnerabilityIBinding.bind(view)


        binding.apply {
            viewLifecycleOwner.lifecycleScope.launchWhenStarted {
                viewModel.SectionIHasBlank.collectLatest {
                    btnNext.isEnabled = it.not()
                }
            }



            tvSocialAssistanceProgram.visibility = View.GONE
            tilNameOfSocialAssistanceProgram.visibility = View.GONE
            rgSocialAssistanceProgram.setOnCheckedChangeListener { _, checkedId ->
                when (checkedId) {
                    rbYesSocialAssistanceProgram.id -> {
                        viewModel.benefitFromSocialAssistanceProgram =
                            rbYesSocialAssistanceProgram.text as String

                        tvSocialAssistanceProgram.visibility = View.VISIBLE
                        tilNameOfSocialAssistanceProgram.visibility = View.VISIBLE


                        viewModel.sectionIHasBlankFields()

                    }
                    else -> {

                        viewModel.benefitFromSocialAssistanceProgram =
                            rbNoSocialAssistanceProgram.text as String
                        tilNameOfSocialAssistanceProgram.editText?.setText("")
                        tvSocialAssistanceProgram.visibility = View.GONE
                        tilNameOfSocialAssistanceProgram.visibility = View.GONE

                        viewModel.sectionIHasBlankFields()

                    }
                }

            }
            viewModel.apply {
                cbSaleOfProductionAssets.isChecked = saleOfProductionAssets == getString(R.string.yes)
                cbUseOfChildLabor.isChecked = useOfChildLabour == getString(R.string.yes)
                cbUseOfEarlyMarriage.isChecked = useOfEarlyMarriage == getString(R.string.yes)
                cbAbandonHealthcare.isChecked = gaveUpHealthCare == getString(R.string.yes)
                cbRemoveChildrenFromSchool.isChecked = takeChildrenOutOfSchool == getString(R.string.yes)

                cbConflict.isChecked = affectedByConflict == getString(R.string.yes)
                cbClimaticShock.isChecked = affectedByClimateShock == getString(R.string.yes)
                cbEpidemic.isChecked = affectedByEpidemic == getString(R.string.yes)
                cbAffectedByOtherShock.isChecked = affectedByOtherShock == getString(R.string.yes)

            }


//            val tils = listOf(
//                tilNumberOfGoatOwned,
//                tilNumberOfSheepOwned,
//                tilNumberOfCowOwned,
//                tilNumberOfRabbitOwned,
//                tilNumberOfPigsOwned,
//                tilNumberOfPoultryOwned,
//                tilNumberOfGuineaPigOwned,
//                tilOtherLivestockQty
//            )






            tilNumberOfMealsEatenByAdults18PlusYesterday.editText?.addTextChangedListener {
                viewModel.apply {
                    numberOfMealsAdults18plus = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilNumberOfMealsEatenByChildren6To17Yesterday.editText?.addTextChangedListener {
                viewModel.apply {
                    numberOfMealsChildren6To17 = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilNumberOfMealsEatenByChildren2To5Yesterday.editText?.addTextChangedListener {
                viewModel.apply {
                    numberOfMealsChildren2To5 = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedStapleFoods.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedStapleFoods = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedLegumesOrNuts.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedLegumes = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedDairyProducts.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedDiary = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilNumberOfDaysInWeekConsumedMeat.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedMeat = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedVegetables.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedVegetables = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedFruits.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedFruits = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilDaysInWeekConsumedCookingOils.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedCookingOils = it.toString()
                    sectionIHasBlankFields()
                }
            }
            tilNumberOfDaysInWeekConsumedSugarOrSweetProducts.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedSugarOrSweets = it.toString()
                }
            }
            tilNameOfSocialAssistanceProgram.editText?.addTextChangedListener {
                viewModel.apply {
                    nameOfSocialAssistanceProgram = it.toString()
                }
            }
            tilOtherShock.editText?.addTextChangedListener {
                viewModel.apply {
                    affectedByOtherShock = it.toString()
                }
            }
            tilDaysSpentReduceAmountConsumedCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysReducedAmountConsumed = it.toString()
                }
            }
            tilDaysSpentReduceMealsConsumedCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysReducedMealsConsumed = it.toString()
                }
            }
            tilDaysSpentEatLessExpensivelyCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysEatLessExpensively = it.toString()
                }
            }
            tilDaysSpentReduceMealsAdultForfeitMealForChildCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysReducedMealsAdult = it.toString()
                }
            }
            tilDaysSpentBorrowFoodOrRelyOnFamilyHelpCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysBorrowFood = it.toString()
                }
            }
            tilDaysSpentDaysWithoutEatingCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysWithoutEating = it.toString()
                }
            }
            tilDaysSpentBeggingCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysBeggingFood = it.toString()
                }
            }
            tilDaysSpentConsumeWildFoodCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysConsumedWildFood = it.toString()
                }
            }
            tilOtherFoodCopingStrategy.editText?.addTextChangedListener {
                viewModel.apply {
                    daysOtherCoping = it.toString()
                }
            }
            viewModel.apply {
                cbConflict.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> affectedByConflict = getString(R.string.yes)


                        else -> affectedByConflict = getString(R.string.no)


                    }
                }





                cbEpidemic.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> affectedByEpidemic = getString(R.string.yes)
                        false -> affectedByEpidemic = getString(R.string.no)
                    }
                }
                cbClimaticShock.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> affectedByClimateShock = getString(R.string.yes)
                        false -> affectedByClimateShock = getString(R.string.no)
                    }
                }
                cbAffectedByOtherShock.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> affectedByOtherShock = getString(R.string.yes)
                        false -> affectedByOtherShock = getString(R.string.no)
                    }
                }

                cbRemoveChildrenFromSchool.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> takeChildrenOutOfSchool = getString(R.string.yes)
                        false -> takeChildrenOutOfSchool = getString(R.string.no)
                    }
                }
                cbSaleOfProductionAssets.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> saleOfProductionAssets = getString(R.string.yes)
                        false -> saleOfProductionAssets = getString(R.string.no)
                    }
                }
                cbUseOfChildLabor.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> {
                            useOfChildLabour = getString(R.string.yes)
                        }
                        false -> useOfChildLabour = getString(R.string.no)
                    }
                }
                cbUseOfEarlyMarriage.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> useOfEarlyMarriage = getString(R.string.yes)
                        false -> useOfEarlyMarriage = getString(R.string.no)
                    }
                }
                cbAbandonHealthcare.setOnCheckedChangeListener { _, b ->
                    when(b){
                        true -> gaveUpHealthCare = getString(R.string.yes)
                        false -> gaveUpHealthCare = getString(R.string.no)
                    }
                }
            }








            val title =
                if (viewModel.household != null) getString(R.string.edit_household) else getString(R.string.add_household)

            btnNext.setOnClickListener {
                val bundle = bundleOf("title" to title)
                findNavController().navigate(R.id.formStepSevenFragment, bundle)
            }
            btnPrevious.setOnClickListener {

                val bundle = bundleOf("title" to title)
                findNavController().navigate(R.id.sectionHAssetsIncomeFragment, bundle)

            }

            viewModel.apply {
                tilNumberOfMealsEatenByAdults18PlusYesterday.editText?.setText(numberOfMealsAdults18plus)
                tilNumberOfMealsEatenByChildren6To17Yesterday.editText?.setText(numberOfMealsChildren6To17)
                tilNumberOfMealsEatenByChildren2To5Yesterday.editText?.setText(numberOfMealsChildren2To5)
                tilDaysInWeekConsumedStapleFoods.editText?.setText(daysConsumedStapleFoods)
                tilDaysInWeekConsumedLegumesOrNuts.editText?.setText(daysConsumedLegumes)
                tilDaysInWeekConsumedDairyProducts.editText?.setText(daysConsumedDiary)
                tilNumberOfDaysInWeekConsumedMeat.editText?.setText(daysConsumedMeat)
                tilDaysInWeekConsumedVegetables.editText?.setText(daysConsumedVegetables)
                tilDaysInWeekConsumedFruits.editText?.setText(daysConsumedFruits)
                tilDaysInWeekConsumedCookingOils.editText?.setText(daysConsumedCookingOils)
                tilNumberOfDaysInWeekConsumedSugarOrSweetProducts.editText?.setText(daysConsumedSugarOrSweets)
                tilNameOfSocialAssistanceProgram.editText?.setText(nameOfSocialAssistanceProgram)
                tilOtherShock.editText?.setText(affectedByOtherShock)
                tilDaysSpentReduceAmountConsumedCopingStrategy.editText?.setText(daysReducedAmountConsumed)
                tilDaysSpentReduceMealsConsumedCopingStrategy.editText?.setText(daysReducedMealsConsumed)
                tilDaysSpentEatLessExpensivelyCopingStrategy.editText?.setText(daysEatLessExpensively)
                tilDaysSpentReduceMealsAdultForfeitMealForChildCopingStrategy.editText?.setText(daysReducedMealsAdult)
                tilDaysSpentBorrowFoodOrRelyOnFamilyHelpCopingStrategy.editText?.setText(daysBorrowFood)
                tilDaysSpentDaysWithoutEatingCopingStrategy.editText?.setText(daysWithoutEating)
                tilDaysSpentBeggingCopingStrategy.editText?.setText(daysBeggingFood)
                tilDaysSpentConsumeWildFoodCopingStrategy.editText?.setText(daysConsumedWildFood)
                tilOtherFoodCopingStrategy.editText?.setText(daysOtherCoping)
            }

            when (viewModel.benefitFromSocialAssistanceProgram) {
                rbYesSocialAssistanceProgram.text -> rgSocialAssistanceProgram.check(
                    rbYesSocialAssistanceProgram.id
                )
                rbNoSocialAssistanceProgram.text -> rgSocialAssistanceProgram.check(
                    rbNoSocialAssistanceProgram.id
                )
            }


        } //end of apply block

        viewModel.sectionIHasBlankFields()
    }   //end of onCreate


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object{
        const val TAG = "SectionI"
    }


}